name: Deploy app

on:
  push:
    branches:
      - main

env:
  REGISTRY_NAME: poltweetexregistry
  CLUSTER_NAME: poltweetexkube6262b6af
  CLUSTER_RESOURCE_GROUP: resourceGroup332493e1
  NAMESPACE: default

jobs:
  up:
    name: Deploy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Setup Node
        uses: actions/setup-node@v1
        with:
          node-version: 14.x
      - run: npm install
      - uses: pulumi/actions@v3
        with:
          command: up
          stack-name: dev
        env:
          PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
          ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
          ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}

  build:
    name: Build and deploy k8s resources
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    
    # Connect to Azure Container registry (ACR)
    - uses: azure/docker-login@v1
      with:
        login-server: ${{ env.REGISTRY_NAME }}.azurecr.io
        username: ${{ secrets.REGISTRY_USERNAME }} 
        password: ${{ secrets.REGISTRY_PASSWORD }}
    
    # Container build and push to a Azure Container registry (ACR)
    - run: |
        docker build ./backend/ -t ${{ env.REGISTRY_NAME }}.azurecr.io/myimage:${{ github.sha }}
        docker push ${{ env.REGISTRY_NAME }}.azurecr.io/myimage:${{ github.sha }}
    
    # Set the target Azure Kubernetes Service (AKS) cluster. 
    - uses: azure/aks-set-context@v1
      with:
        creds: '${{ secrets.AZURE_CREDENTIALS }}'
        cluster-name: ${{ env.CLUSTER_NAME }}
        resource-group: ${{ env.CLUSTER_RESOURCE_GROUP }}
    
    # Create namespace if doesn't exist
    - run: |
        kubectl create namespace ${{ env.NAMESPACE }} --dry-run -o json | kubectl apply -f -
    
    # Create imagepullsecret for Azure Container registry (ACR)
    - uses: azure/k8s-create-secret@v1
      with:
        container-registry-url: ${{ env.REGISTRY_NAME }}.azurecr.io
        container-registry-username: ${{ secrets.REGISTRY_USERNAME }}
        container-registry-password: ${{ secrets.REGISTRY_PASSWORD }}
        secret-name: ${{ env.REGISTRY_NAME }}-registry-connection
        namespace: ${{ env.NAMESPACE }}
    
    # Setup Helm
    - uses: azure/setup-helm@v1

    # Add helm repos
    - run: |
        helm repo add bitnami https://charts.bitnami.com/bitnami
        helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
        helm repo add jetstack https://charts.jetstack.io
        helm repo update
    
    # Create ingress controller namespace
    - run: |
        kubectl create namespace ingress-basic --dry-run -o json | kubectl apply -f -
    
    # Create ingress controller
    - run: |
        helm upgrade --install nginx-ingress ingress-nginx/ingress-nginx \
          --namespace ingress-basic \
          --set controller.replicaCount=2 \
          --set controller.nodeSelector."beta\.kubernetes\.io/os"=linux \
          --set defaultBackend.nodeSelector."beta\.kubernetes\.io/os"=linux \
          --set controller.admissionWebhooks.patch.nodeSelector."beta\.kubernetes\.io/os"=linux \
          --set service.annotations[0]="service.beta.kubernetes.io/azure-dns-label-name: poltweetex"
    
    - run: |
      kubectl label namespace ingress-basic cert-manager.io/disable-validation=true

    # Install cert-manager
    - run: |
      helm upgrade --install cert-manager jetstack/cert-manager \
        --namespace ingress-basic \
        --set installCRDs=true \
        --set nodeSelector."kubernetes\.io/os"=linux \
        --set webhook.nodeSelector."kubernetes\.io/os"=linux \
        --set cainjector.nodeSelector."kubernetes\.io/os"=linux
    
    # Create CA Issuer
    - run: |
      kubectl apply -f manifests/cluster-issuer.yml
    
    # Pull PostgreSQL chart
    - run: |
        helm pull bitnami/postgresql --untar
    
    # Postgres secret
    - uses: azure/k8s-create-secret@v1
      with:
        secret-type: generic
        secret-name: postgres-password
        arguments: --from-literal=postgresql-password=${{ secrets.POSTGRESQL_PASSWORD }}
        namespace: ${{ env.NAMESPACE }}

    # Bake helm chart
    - run: |
        helm template postgres ./postgresql/ -f postgres-values.yaml > manifests/postgres.yaml
    
    # Deploy PostgreSQL
    - uses: azure/k8s-deploy@v1
      with:
        manifests: |
          manifests/postgres.yaml
        namespace: ${{ env.NAMESPACE }}

    # Create configmap if not exists
    - run: |
        kubectl create configmap app-config --from-file=configmap/ --dry-run=client -o json | kubectl apply -f -
    
    # Deploy app to AKS
    - uses: azure/k8s-deploy@v1
      with:
        manifests: |
          manifests/deployment.yml
          manifests/ingress.yml
        images: |
          ${{ env.REGISTRY_NAME }}.azurecr.io/myimage:${{ github.sha }}
        imagepullsecrets: |
          ${{ env.REGISTRY_NAME }}-registry-connection
        namespace: ${{ env.NAMESPACE }}

    # Build worker
    - run: |
        docker build ./worker/ -t ${{ env.REGISTRY_NAME }}.azurecr.io/myworker:${{ github.sha }}
        docker push ${{ env.REGISTRY_NAME }}.azurecr.io/myworker:${{ github.sha }}
    
    # Delete job if exists
    - run: |
        kubectl delete job update-job || true

    # Deploy job to AKS
    - uses: azure/k8s-deploy@v1
      with:
        manifests: |
          manifests/job.yml
        images: |
          ${{ env.REGISTRY_NAME }}.azurecr.io/myworker:${{ github.sha }}
        imagepullsecrets: |
          ${{ env.REGISTRY_NAME }}-registry-connection
        namespace: ${{ env.NAMESPACE }}
    
    # Delete cronjob if exists
    - run: |
        kubectl delete cronjob update-cronjob || true

    # Deploy cronjob to AKS
    - uses: azure/k8s-deploy@v1
      with:
        manifests: |
          manifests/cronjob.yml
        images: |
          ${{ env.REGISTRY_NAME }}.azurecr.io/myworker:${{ github.sha }}
        imagepullsecrets: |
          ${{ env.REGISTRY_NAME }}-registry-connection
        namespace: ${{ env.NAMESPACE }}